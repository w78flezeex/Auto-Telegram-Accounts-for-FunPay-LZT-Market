from __future__ import annotations
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from cardinal import Cardinal

import os
import json
import logging
import re
import requests
import threading
import queue
import concurrent.futures
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent
import time
import uuid
import hashlib

try:
    import pymysql
except ImportError:
    print(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pymysql –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

NAME = "Auto Telegram Acoounts"
VERSION = "2.1"
DESCRIPTION = "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å LZT Market"
CREDITS = "@KatsumiKamado | @NightFPP | @ThN1ght"
UUID = "b2e3c941-0a5f-4e81-9f2d-7c8a2d6b8e7c"
SETTINGS_PAGE = False

LOGGER_PREFIX = "[TELEGRAM_ACCOUNTS]"
logger = logging.getLogger("FPC.telegramaccounts")

CONFIG_DIR = "storage/tg"
CONFIG_PATH = f"{CONFIG_DIR}/config.json"
USER_ORDERS_PATH = f"{CONFIG_DIR}/user_orders.json"

DEFAULT_PURCHASE_TEMPLATE = """–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!

–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "cd {phone}" –≤ —ç—Ç–æ—Ç —á–∞—Ç."""

DEFAULT_CODE_TEMPLATE = """‚úÖ –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Telegram: {code}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –Ω–µ –∑–∞–±—É–¥—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ —Ç—É—Ç: {order_link}

–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!"""

used_orders = {}
order_account_ids = {}
order_phone_numbers = {}
order_queue = queue.Queue()
executor = None
max_workers = 5
active_tasks = 0
max_concurrent_tasks = 3
task_lock = threading.Lock()
is_processing = False

ORIGIN_MAP = {
    "phishing": "–§–∏—à–∏–Ω–≥",
    "stealer": "–°—Ç–∏–ª–µ—Ä",
    "personal": "–õ–∏—á–Ω—ã–π",
    "resale": "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞",
    "autoreg": "–ê–≤—Ç–æ–†–µ–≥",
    "samoreg": "–°–∞–º–æ–†–µ–≥"
}

bot = None
cardinal_instance = None
config = {}


def show_tg_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tg_settings"""
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üåç –°—Ç—Ä–∞–Ω—ã", callback_data="tg_countries"),
        InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="tg_admins"),
        InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç", callback_data="tg_auto_returns"),
        InlineKeyboardButton("üîë LZT API Token", callback_data="tg_lolz_token"),
        InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data="tg_orders"),
        InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="tg_origin"),
        InlineKeyboardButton("üí¨ –®–∞–±–ª–æ–Ω—ã", callback_data="tg_message_templates"),
        InlineKeyboardButton("‚öôÔ∏è soon...", callback_data="tg_setup_plugin")
    )

    countries_count = len(config["countries"])
    admins_count = len(config["administrators"])

    message_text = (
        f"ü§ñ <b>{NAME}</b> <code>v{VERSION}</code>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {DESCRIPTION}\n"
        f"üë®‚Äçüíª <b>–ê–≤—Ç–æ—Ä:</b> {CREDITS}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üåç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω: {countries_count}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}\n\n"
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω–æ–º–µ—Ä–æ–≤:</b>"
    )

    bot.send_message(message.chat.id, message_text, reply_markup=kb, parse_mode="HTML")


def show_tg_settings_callback(call: types.CallbackQuery):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üåç –°—Ç—Ä–∞–Ω—ã", callback_data="tg_countries"),
        InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="tg_admins"),
        InlineKeyboardButton("üîÑ –ê–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç", callback_data="tg_auto_returns"),
        InlineKeyboardButton("üîë LZT API Token", callback_data="tg_lolz_token"),
        InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data="tg_orders"),
        InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="tg_origin"),
        InlineKeyboardButton("üí¨ –®–∞–±–ª–æ–Ω—ã", callback_data="tg_message_templates"),
        InlineKeyboardButton("‚öôÔ∏è soon...", callback_data="tg_setup_plugin")
    )

    countries_count = len(config["countries"])
    admins_count = len(config["administrators"])

    message_text = (
        f"ü§ñ <b>{NAME}</b> <code>v{VERSION}</code>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {DESCRIPTION}\n"
        f"üë®‚Äçüíª <b>–ê–≤—Ç–æ—Ä:</b> {CREDITS}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üåç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω: {countries_count}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}\n\n"
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω–æ–º–µ—Ä–æ–≤:</b>"
    )

    bot.edit_message_text(
        message_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=kb,
        parse_mode="HTML"
    )


def ensure_config_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(CONFIG_DIR):
        os.makedirs(CONFIG_DIR)

    if not os.path.exists(CONFIG_PATH):
        default_config = {
            "countries": {},
            "administrators": [],
            "auto_returns": True,
            "lolz_token": "",
            "origins": ["personal"],
            "purchase_template": DEFAULT_PURCHASE_TEMPLATE,
            "code_template": DEFAULT_CODE_TEMPLATE,
            "orders_profit": {}
        }
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=4)
        return default_config

    with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
        config_data = json.load(f)

        if "origin" in config_data and "origins" not in config_data:
            logger.info(f"{LOGGER_PREFIX} –ú–∏–≥—Ä–∞—Ü–∏—è —Å –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π")
            config_data["origins"] = [config_data["origin"]]
            del config_data["origin"]

            with open(CONFIG_PATH, 'w', encoding='utf-8') as f_write:
                json.dump(config_data, f_write, ensure_ascii=False, indent=4)

        if "origins" not in config_data:
            logger.info(f"{LOGGER_PREFIX} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è origins –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            config_data["origins"] = ["personal"]

        if "purchase_template" not in config_data:
            logger.info(f"{LOGGER_PREFIX} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            config_data["purchase_template"] = DEFAULT_PURCHASE_TEMPLATE

        if "code_template" not in config_data:
            logger.info(f"{LOGGER_PREFIX} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–¥–∞—á–∏ –∫–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            config_data["code_template"] = DEFAULT_CODE_TEMPLATE

        if "orders_profit" not in config_data:
            logger.info(f"{LOGGER_PREFIX} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∑–∞–∫–∞–∑–æ–≤")
            config_data["orders_profit"] = {}

        with open(CONFIG_PATH, 'w', encoding='utf-8') as f_write:
            json.dump(config_data, f_write, ensure_ascii=False, indent=4)

        return config_data


def load_user_orders():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not os.path.exists(USER_ORDERS_PATH):
        user_orders_data = {
            "user_orders": {},
            "phone_users": {}
        }
        with open(USER_ORDERS_PATH, 'w', encoding='utf-8') as f:
            json.dump(user_orders_data, f, ensure_ascii=False, indent=4)
        return user_orders_data

    try:
        with open(USER_ORDERS_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {"user_orders": {}, "phone_users": {}}


def save_user_orders(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USER_ORDERS_PATH, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False


def save_config():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
    with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=4)


def save_order_profit(order_id, fp_sum, lolz_cost):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∑–∞–∫–∞–∑–∞"""
    try:
        profit = float(fp_sum) - float(lolz_cost)
        config["orders_profit"][str(order_id)] = {
            "fp_sum": fp_sum,
            "lolz_cost": lolz_cost,
            "profit": profit,
            "date": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        save_config()
        logger.info(f"{LOGGER_PREFIX} –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {profit} —Ä—É–±.")
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        return False


def get_order_profit(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∑–∞–∫–∞–∑–∞"""
    return config["orders_profit"].get(str(order_id))


def get_total_profit():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    total = 0
    for order_data in config["orders_profit"].values():
        total += order_data.get("profit", 0)
    return total


def set_origin(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è BIND_TO_DELETE"""
    logger.info(f"{LOGGER_PREFIX} –í—ã–∑–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è set_origin —Å callback_data: {call.data}")
    origin_code = call.data.split("_")[-1]

    if origin_code == "self_reg":
        origin_code = "self_registration"

    if origin_code in ORIGIN_MAP:
        if origin_code in config["origins"]:
            if len(config["origins"]) > 1:
                config["origins"].remove(origin_code)
                action_text = "—É–¥–∞–ª–µ–Ω–æ"
            else:
                bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–ø –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
                return
        else:
            config["origins"].append(origin_code)
            action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"

        save_config()
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ '{ORIGIN_MAP[origin_code]}' {action_text}")

    show_tg_settings_callback(call)


def import_existing_orders(c: Cardinal):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã –∏ –∏—Ö –Ω–æ–º–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info(f"{LOGGER_PREFIX} –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        try:
            account_data = c.account.get()
            logger.info(f"{LOGGER_PREFIX} –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as account_error:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {account_error}")
            return
        
        user_orders_data = load_user_orders()

        try:
            next_order, orders = c.account.get_sells()
        except Exception as sells_error:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–∞–∂: {sells_error}")
            return

        imported_count = 0

        for order in orders:
            if order.id in order_phone_numbers and order.id in order_account_ids:
                phone = order_phone_numbers[order.id]
                item_id = order_account_ids[order.id]
                user_id = str(order.buyer_username)

                if user_id not in user_orders_data["user_orders"]:
                    user_orders_data["user_orders"][user_id] = {}

                if str(order.id) not in user_orders_data["user_orders"][user_id]:
                    user_orders_data["user_orders"][user_id][str(order.id)] = {
                        "phone": phone,
                        "item_id": item_id
                    }
                    user_orders_data["phone_users"][phone] = user_id
                    imported_count += 1

        save_user_orders(user_orders_data)
        logger.info(f"{LOGGER_PREFIX} –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {imported_count} –∑–∞–ø–∏—Å–µ–π.")
        
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")

def init_commands(c_: Cardinal):
    global bot, cardinal_instance, config, executor
    logger.info("=== init_commands() from TelegramAccounts ===")

    cardinal_instance = c_
    bot = c_.telegram.bot
    config = ensure_config_exists()

    load_user_orders()

    executor = concurrent.futures.ThreadPoolExecutor(max_workers=max_workers)

    threading.Thread(target=import_existing_orders, args=(c_,), daemon=True).start()

    threading.Thread(target=process_order_queue, daemon=True).start()

    _all_handlers = [handler for handler_group in bot.callback_query_handlers for handler in handler_group]
    logger.info(f"{LOGGER_PREFIX} –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(_all_handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('tg_'))
    def handle_all_callbacks(call: types.CallbackQuery):
        logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω callback: {call.data}")

        if call.data == "samoreg" or call.data == "samoreg":
            logger.info(f"{LOGGER_PREFIX} –û–±–Ω–∞—Ä—É–∂–µ–Ω callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è '–°–∞–º–æ—Ä–µ–≥': {call.data}")
            set_origin(call)
            return

        if call.data == "tg_activate":
            activate_plugin(call)
            return

        if call.data.startswith("tg_edit_country_name_"):
            handle_edit_country_name(call)
        elif call.data.startswith("tg_edit_country_min_"):
            handle_edit_country_min(call)
        elif call.data.startswith("tg_edit_country_max_"):
            handle_edit_country_max(call)
        elif call.data.startswith("tg_edit_country_"):
            handle_edit_country_menu(call)
        elif call.data == "tg_countries":
            handle_countries_menu(call)
        elif call.data == "tg_add_country":
            handle_add_country(call)
        elif call.data.startswith("tg_delete_country_"):
            handle_delete_country(call)
        elif call.data.startswith("tg_confirm_delete_country_"):
            handle_confirm_delete_country(call)
        elif call.data == "tg_admins":
            admin_menu(call)
        elif call.data == "tg_auto_returns":
            auto_returns_menu(call)
        elif call.data == "tg_auto_returns_on":
            auto_returns_on(call)
        elif call.data == "tg_auto_returns_off":
            auto_returns_off(call)
        elif call.data == "tg_lolz_token":
            lolz_token_menu(call)
        elif call.data == "tg_add_lolz_token" or call.data == "tg_edit_lolz_token":
            add_edit_lolz_token(call)
        elif call.data == "tg_delete_lolz_token":
            delete_lolz_token_confirm(call)
        elif call.data == "tg_confirm_delete_lolz_token":
            delete_lolz_token_confirmed(call)
        elif call.data == "tg_check_lolz_token":
            check_lolz_token(call)
        elif call.data == "tg_origin":
            origin_menu(call)
        elif call.data == "tg_add_admin":
            add_admin(call)
        elif call.data.startswith("tg_set_origin_"):
            set_origin(call)
        elif call.data == "tg_setup_plugin":
            plugin_setup_menu(call)
        elif call.data == "tg_back_to_main":
            show_tg_settings_callback(call)
        elif call.data == "tg_message_templates":
            message_templates_menu(call)
        elif call.data == "tg_edit_purchase_template":
            edit_purchase_template(call)
        elif call.data == "tg_edit_code_template":
            edit_code_template(call)
        elif call.data == "tg_orders":
            orders_menu(call)
        elif call.data.startswith("tg_page_") and "orders" in call.data:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            orders_menu(call)
        elif call.data.startswith("tg_order_"):
            order_details(call)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    @bot.message_handler(commands=['tg_settings'])
    def tg_settings_command(message: types.Message):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /tg_settings"""
        show_tg_settings(message)

    def handle_countries_menu(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="tg_add_country"))

        if config["countries"]:
            for code, country_data in config["countries"].items():
                callback_data = f"tg_edit_country_{code.strip()}"
                logger.info(f"{LOGGER_PREFIX} –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code} —Å callback_data: {callback_data}")
                kb.add(InlineKeyboardButton(
                    f"{country_data['name']} ({code}) - {country_data['min_price']}‚ÇΩ-{country_data['max_price']}‚ÇΩ",
                    callback_data=callback_data
                ))

        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main"))
        bot.edit_message_text("üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=kb)

    def handle_add_country(call: types.CallbackQuery):
        msg = bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID –¥–ª—è –ò–Ω–¥–æ–Ω–µ–∑–∏–∏):",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_back_to_main")
            )
        )
        bot.register_next_step_handler(msg, add_country_step2)

    def handle_edit_country_menu(call: types.CallbackQuery):
        logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {call.data}")

        if call.data.startswith("tg_edit_country_name_") or \
                call.data.startswith("tg_edit_country_min_") or \
                call.data.startswith("tg_edit_country_max_"):
            logger.info(f"{LOGGER_PREFIX} –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π callback: {call.data}")
            return

        country_code = call.data.replace("tg_edit_country_", "")
        logger.info(f"{LOGGER_PREFIX} –ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {country_code}")

        if country_code not in config["countries"]:
            bot.answer_callback_query(call.id, "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return handle_countries_menu(call)

        try:
            country_data = config["countries"][country_code]
            kb = InlineKeyboardMarkup(row_width=1)
            kb.add(
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"tg_edit_country_name_{country_code}"),
                InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É", callback_data=f"tg_edit_country_min_{country_code}"),
                InlineKeyboardButton("üíé –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å. —Ü–µ–Ω—É", callback_data=f"tg_edit_country_max_{country_code}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data=f"tg_delete_country_{country_code}"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_countries")
            )

            bot.edit_message_text(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω—ã: {country_data['name']} ({country_code})\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {country_data['min_price']}‚ÇΩ\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {country_data['max_price']}‚ÇΩ",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=kb
            )
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            handle_countries_menu(call)

    def handle_edit_country_name(call: types.CallbackQuery):
        logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {call.data}")
        country_code = call.data.replace("tg_edit_country_name_", "")

        if country_code not in config["countries"]:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return handle_countries_menu(call)

        try:
            msg = bot.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tg_edit_country_{country_code}")
                )
            )
            bot.register_next_step_handler(msg, process_country_name_edit, country_code)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            handle_countries_menu(call)

    def handle_edit_country_min(call: types.CallbackQuery):
        logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω. —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {call.data}")
        country_code = call.data.replace("tg_edit_country_min_", "")

        if country_code not in config["countries"]:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return handle_countries_menu(call)

        try:
            msg = bot.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {config['countries'][country_code]['name']} ({country_code}):",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tg_edit_country_{country_code}")
                )
            )
            bot.register_next_step_handler(msg, process_country_min_edit, country_code)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–Ω. —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            handle_countries_menu(call)

    def handle_edit_country_max(call: types.CallbackQuery):
        logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–∫—Å. —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {call.data}")
        country_code = call.data.replace("tg_edit_country_max_", "")

        if country_code not in config["countries"]:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return handle_countries_menu(call)

        try:
            msg = bot.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {config['countries'][country_code]['name']} ({country_code}):",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tg_edit_country_{country_code}")
                )
            )
            bot.register_next_step_handler(msg, process_country_max_edit, country_code)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞–∫—Å. —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            handle_countries_menu(call)

    def handle_delete_country(call: types.CallbackQuery):
        country_code = call.data.replace("tg_delete_country_", "")
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"tg_confirm_delete_country_{country_code}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"tg_edit_country_{country_code}")
        )

        bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É {config['countries'][country_code]['name']} ({country_code})?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    def handle_confirm_delete_country(call: types.CallbackQuery):
        country_code = call.data.replace("tg_confirm_delete_country_", "")
        country_name = config["countries"][country_code]["name"]
        del config["countries"][country_code]
        save_config()

        bot.answer_callback_query(call.id, f"–°—Ç—Ä–∞–Ω–∞ {country_name} —É–¥–∞–ª–µ–Ω–∞!")
        handle_countries_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "tg_admins")
    def admin_menu(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="tg_add_admin"))

        for admin_id in config["administrators"]:
            kb.add(InlineKeyboardButton(
                f"ID: {admin_id}",
                callback_data=f"tg_delete_admin_{admin_id}"
            ))

        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main"))
        bot.edit_message_text(
            "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è):",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data == "tg_add_admin")
    def add_admin(call: types.CallbackQuery):
        msg = bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_admins")
            )
        )
        bot.register_next_step_handler(msg, process_add_admin)

    def process_add_admin(message: types.Message):
        if message.text is None:
            return

        try:
            bot.delete_message(message.chat.id, message.message_id - 1)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        try:
            admin_id = int(message.text.strip())
            if admin_id in config["administrators"]:
                bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                bot.clear_step_handler_by_chat_id(message.chat.id)
                return show_tg_settings(message)

            config["administrators"].append(admin_id)
            save_config()
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
            show_tg_settings(message)
        except ValueError:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID!")
            show_tg_settings(message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("tg_delete_admin_"))
    def delete_admin_confirm(call: types.CallbackQuery):
        admin_id = int(call.data.split("_")[-1])
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"tg_confirm_delete_admin_{admin_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="tg_admins")
        )

        bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id}?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("tg_confirm_delete_admin_"))
    def delete_admin_confirmed(call: types.CallbackQuery):
        admin_id = int(call.data.split("_")[-1])
        if admin_id in config["administrators"]:
            config["administrators"].remove(admin_id)
            save_config()

        bot.answer_callback_query(call.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª–µ–Ω!")
        admin_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "tg_auto_returns")
    def auto_returns_menu(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=2)
        current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if config["auto_returns"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"

        kb.add(
            InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="tg_auto_returns_on"),
            InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="tg_auto_returns_off")
        )
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main"))

        bot.edit_message_text(
            f"üîÑ –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã: {current_status}\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç–∞—Ö —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
            "–≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –Ω–æ–º–µ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
            "–ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏ "
            "–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data == "tg_auto_returns_on")
    def auto_returns_on(call: types.CallbackQuery):
        config["auto_returns"] = True
        save_config()
        bot.answer_callback_query(call.id, "–ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!")
        auto_returns_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "tg_auto_returns_off")
    def auto_returns_off(call: types.CallbackQuery):
        config["auto_returns"] = False
        save_config()
        bot.answer_callback_query(call.id, "–ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã!")
        auto_returns_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "tg_lolz_token")
    def lolz_token_menu(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=1)

        if config["lolz_token"]:
            masked_token = config["lolz_token"][:4] + "*" * (len(config["lolz_token"]) - 8) + config["lolz_token"][-4:]
            kb.add(
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω", callback_data="tg_edit_lolz_token"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="tg_delete_lolz_token"),
                InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="tg_check_lolz_token")
            )
            token_status = f"üîë –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {masked_token}"
        else:
            kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="tg_add_lolz_token"))
            token_status = "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main"))

        bot.edit_message_text(
            f"LOLZ TOKEN: {token_status}",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data == "tg_add_lolz_token" or call.data == "tg_edit_lolz_token")
    def add_edit_lolz_token(call: types.CallbackQuery):
        action = "–í–≤–µ–¥–∏—Ç–µ" if call.data == "tg_add_lolz_token" else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π"
        msg = bot.edit_message_text(
            f"{action} LOLZ —Ç–æ–∫–µ–Ω:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_lolz_token")
            )
        )
        bot.register_next_step_handler(msg, process_lolz_token)

    def process_lolz_token(message: types.Message):
        if message.text is None:
            return

        try:
            bot.delete_message(message.chat.id, message.message_id - 1)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        token = message.text.strip()
        config["lolz_token"] = token
        save_config()

        bot.clear_step_handler_by_chat_id(message.chat.id)

        bot.delete_message(message.chat.id, message.message_id)

        bot.send_message(message.chat.id, "‚úÖ LOLZ —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        show_tg_settings(message)

    @bot.callback_query_handler(func=lambda call: call.data == "tg_delete_lolz_token")
    def delete_lolz_token_confirm(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="tg_confirm_delete_lolz_token"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="tg_lolz_token")
        )

        bot.edit_message_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å LOLZ —Ç–æ–∫–µ–Ω?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data == "tg_confirm_delete_lolz_token")
    def delete_lolz_token_confirmed(call: types.CallbackQuery):
        config["lolz_token"] = ""
        save_config()
        bot.answer_callback_query(call.id, "LOLZ —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω!")
        lolz_token_menu(call)

    @bot.callback_query_handler(func=lambda call: call.data == "tg_check_lolz_token")
    def check_lolz_token(call: types.CallbackQuery):
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")
        bot.edit_message_text(
            "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω!\n–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ API LOLZ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_lolz_token")
            )
        )

    @bot.callback_query_handler(func=lambda call: call.data == "tg_origin")
    def origin_menu(call: types.CallbackQuery):
        kb = InlineKeyboardMarkup(row_width=1)

        selected_origins = config["origins"]

        for origin_code, origin_name in ORIGIN_MAP.items():
            callback_data = f"tg_set_origin_{origin_code}"
            if origin_code in selected_origins:
                mark = "‚úÖ "
            else:
                mark = "‚òëÔ∏è "

            if origin_code == "self_registration":
                callback_data = "tg_set_origin_self_reg"
                logger.info(f"{LOGGER_PREFIX} –î–ª—è 'self_registration' –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π callback: {callback_data}")

            kb.add(InlineKeyboardButton(f"{mark}{origin_name}", callback_data=callback_data))
            logger.info(f"{LOGGER_PREFIX} –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {origin_name} —Å callback_data: {callback_data}")

        kb.add(InlineKeyboardButton("üîÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="tg_back_to_main"))

        selected_names = [ORIGIN_MAP.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for code in selected_origins]
        selected_text = ", ".join(selected_names)

        bot.edit_message_text(
            f"üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
            f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {selected_text}\n\n"
            f"‚úÖ - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã, –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã\n"
            f"‚òëÔ∏è - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã, –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data == "tg_setup_plugin")
    def plugin_setup_menu(call: types.CallbackQuery):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main"))

        message_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≥–∏–Ω–∞</b>\n\n"
            "–¢–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞–≥–∏–Ω–∞ –µ—â–µ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
        )

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb,
            parse_mode="HTML"
        )

    def orders_menu(call: types.CallbackQuery):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
        page = 0
        if '_' in call.data:
            parts = call.data.split('_')
            if len(parts) > 2 and parts[1] == 'page':
                try:
                    page = int(parts[2])
                except ValueError:
                    page = 0

        PAGE_SIZE = 5

        user_orders_data = load_user_orders()
        kb = InlineKeyboardMarkup(row_width=1)

        total_profit = get_total_profit()

        message_text = f"üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\nüí∞ <b>–û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {total_profit:.2f} —Ä—É–±.\n\n"

        all_orders = []
        for user_id, orders in user_orders_data["user_orders"].items():
            for order_id, order_data in orders.items():
                if order_id in config["orders_profit"]:
                    profit_data = config["orders_profit"][order_id]
                    all_orders.append({
                        "order_id": order_id,
                        "user_id": user_id,
                        "phone": order_data.get("phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                        "profit": profit_data.get("profit", 0),
                        "date": profit_data.get("date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    })
                else:
                    all_orders.append({
                        "order_id": order_id,
                        "user_id": user_id,
                        "phone": order_data.get("phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                        "profit": 0,
                        "date": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    })

        all_orders.sort(key=lambda x: x.get("date", ""), reverse=True)

        if all_orders:
            total_pages = (len(all_orders) - 1) // PAGE_SIZE + 1
            page = min(page, total_pages - 1)

            start_idx = page * PAGE_SIZE
            end_idx = min(start_idx + PAGE_SIZE, len(all_orders))

            current_page_orders = all_orders[start_idx:end_idx]

            message_text += f"<b>–ó–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n"

            for order in current_page_orders:
                profit_str = f"+{order['profit']:.2f} —Ä—É–±." if order['profit'] > 0 else f"{order['profit']:.2f} —Ä—É–±."
                message_text += f"‚Ä¢ –ó–∞–∫–∞–∑ #{order['order_id']} - {profit_str}\n"
                kb.add(InlineKeyboardButton(f"–ó–∞–∫–∞–∑ #{order['order_id']} ({profit_str})",
                                            callback_data=f"tg_order_{order['order_id']}"))

            nav_buttons = []

            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tg_page_{page - 1}_orders"))

            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"tg_page_{page + 1}_orders"))

            if nav_buttons:
                kb.row(*nav_buttons)
        else:
            message_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."

        kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main"))

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb,
            parse_mode="HTML"
        )

    def order_details(call: types.CallbackQuery):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        order_id = call.data.split('_')[-1]
        user_orders_data = load_user_orders()

        all_orders = []
        for uid, orders in user_orders_data["user_orders"].items():
            for o_id, order_data in orders.items():
                if o_id in config["orders_profit"]:
                    profit_data = config["orders_profit"][o_id]
                    all_orders.append({
                        "order_id": o_id,
                        "user_id": uid,
                        "phone": order_data.get("phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                        "profit": profit_data.get("profit", 0),
                        "date": profit_data.get("date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    })
                else:
                    all_orders.append({
                        "order_id": o_id,
                        "user_id": uid,
                        "phone": order_data.get("phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                        "profit": 0,
                        "date": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    })

        all_orders.sort(key=lambda x: x.get("date", ""), reverse=True)

        order_index = -1
        for i, order in enumerate(all_orders):
            if order["order_id"] == order_id:
                order_index = i
                break

        PAGE_SIZE = 5
        page = order_index // PAGE_SIZE if order_index != -1 else 0

        kb = InlineKeyboardMarkup(row_width=1)
        if page > 0:
            kb.add(InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç—Ä. " + str(page + 1) + ")",
                                        callback_data=f"tg_page_{page}_orders"))
        else:
            kb.add(InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="tg_orders"))

        found_order = False
        order_details = {}
        user_id = None

        for uid, orders in user_orders_data["user_orders"].items():
            if order_id in orders:
                found_order = True
                user_id = uid
                order_details = orders[order_id]
                break

        if found_order:
            phone = order_details.get("phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            item_id = order_details.get("item_id", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            profit_info = config["orders_profit"].get(order_id, {})
            fp_sum = profit_info.get("fp_sum", 0)
            lolz_cost = profit_info.get("lolz_cost", 0)
            profit = profit_info.get("profit", 0)
            date = profit_info.get("date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            message_text = (
                f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_id}</b>\n\n"
                f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {user_id}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                f"üÜî <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞ LOLZ:</b> {item_id}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n\n"
                f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
                f"‚Ä¢ –°—É–º–º–∞ –Ω–∞ FunPay: {fp_sum} —Ä—É–±.\n"
                f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ LOLZ: {lolz_cost} —Ä—É–±.\n"
                f"‚Ä¢ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {profit:.2f} —Ä—É–±.\n"
            )

            kb.add(InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ FunPay", url=f"https://funpay.com/orders/{order_id}/"))
        else:
            message_text = f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=kb,
            parse_mode="HTML"
        )

    def message_templates_menu(call: types.CallbackQuery):
        """–ú–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        bot.clear_step_handler_by_chat_id(call.message.chat.id)

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("üìù –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏", callback_data="tg_edit_purchase_template"),
            InlineKeyboardButton("üî¢ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º", callback_data="tg_edit_code_template"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="tg_back_to_main")
        )

        message_text = (
            "üí¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</b>\n"
            "<code>- {phone} - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å –∫–æ–¥–æ–º:</b>\n"
            "<code>- {code} - –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "- {order_link} - —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
            "- {order_id} - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</code>"
        )

        try:
            bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤")

    def edit_purchase_template(call: types.CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
        try:
            current_template = config.get("purchase_template", DEFAULT_PURCHASE_TEMPLATE)
            msg = bot.edit_message_text(
                f"üìù <b>–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</b>\n\n<pre>{current_template}</pre>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                f"- {{phone}} - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_message_templates")
                ),
                parse_mode="HTML"
            )
            bot.register_next_step_handler(msg, process_purchase_template_edit)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            message_templates_menu(call)

    def process_purchase_template_edit(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"""
        if message.text is None:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            show_tg_settings(message)
            return

        try:
            bot.delete_message(message.chat.id, message.message_id - 1)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        new_template = message.text
        if not new_template.strip():
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ü—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            show_tg_settings(message)
            return

        config["purchase_template"] = new_template
        save_config()

        bot.clear_step_handler_by_chat_id(message.chat.id)

        bot.send_message(message.chat.id, "‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        show_tg_settings(message)

    def edit_code_template(call: types.CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º"""
        try:
            current_template = config.get("code_template", DEFAULT_CODE_TEMPLATE)
            msg = bot.edit_message_text(
                f"üî¢ <b>–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º:</b>\n\n<pre>{current_template}</pre>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                f"- {{code}} - –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                f"- {{order_link}} - —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
                f"- {{order_id}} - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_message_templates")
                ),
                parse_mode="HTML"
            )
            bot.register_next_step_handler(msg, process_code_template_edit)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            message_templates_menu(call)

    def process_code_template_edit(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º"""
        if message.text is None:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            show_tg_settings(message)
            return

        try:
            bot.delete_message(message.chat.id, message.message_id - 1)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        new_template = message.text
        if not new_template.strip():
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ü—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            show_tg_settings(message)
            return

        config["code_template"] = new_template
        save_config()

        bot.clear_step_handler_by_chat_id(message.chat.id)

        bot.send_message(message.chat.id, "‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        show_tg_settings(message)


def add_country_step2(message: types.Message):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    country_code = message.text.strip().upper()
    if country_code in config["countries"]:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "‚ùå –°—Ç—Ä–∞–Ω–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return show_tg_settings(message)

    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_back_to_main")
        )
    )
    bot.register_next_step_handler(msg, add_country_step3, country_code)


def add_country_step3(message: types.Message, country_code: str):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    country_name = message.text.strip()
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_back_to_main")
        )
    )
    bot.register_next_step_handler(msg, add_country_step4, country_code, country_name)


def add_country_step4(message: types.Message, country_code: str, country_name: str):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        min_price = int(message.text.strip())
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="tg_back_to_main")
            )
        )
        bot.register_next_step_handler(msg, add_country_step5, country_code, country_name, min_price)
    except ValueError:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        show_tg_settings(message)


def add_country_step5(message: types.Message, country_code: str, country_name: str, min_price: int):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        max_price = int(message.text.strip())
        if max_price < min_price:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π!")
            return show_tg_settings(message)

        config["countries"][country_code] = {
            "name": country_name,
            "min_price": min_price,
            "max_price": max_price
        }
        save_config()

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞ {country_name} ({country_code}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
        )
        show_tg_settings(message)
    except ValueError:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        show_tg_settings(message)


def process_country_name_edit(message: types.Message, country_code: str):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        new_name = message.text.strip()
        if country_code not in config["countries"]:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return show_tg_settings(message)

        config["countries"][country_code]["name"] = new_name
        save_config()
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã {country_code} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}!")
        show_tg_settings(message)
    except Exception as e:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã!")
        show_tg_settings(message)


def process_country_min_edit(message: types.Message, country_code: str):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        if country_code not in config["countries"]:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return show_tg_settings(message)

        new_min = int(message.text.strip())
        if new_min > config["countries"][country_code]["max_price"]:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π!")
            return show_tg_settings(message)

        config["countries"][country_code]["min_price"] = new_min
        save_config()
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_min}‚ÇΩ!")
        show_tg_settings(message)
    except ValueError:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        show_tg_settings(message)
    except Exception as e:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏–Ω. —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã!")
        show_tg_settings(message)


def process_country_max_edit(message: types.Message, country_code: str):
    if message.text is None:
        return

    try:
        bot.delete_message(message.chat.id, message.message_id - 1)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        if country_code not in config["countries"]:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return show_tg_settings(message)

        new_max = int(message.text.strip())
        if new_max < config["countries"][country_code]["min_price"]:
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π!")
            return show_tg_settings(message)

        config["countries"][country_code]["max_price"] = new_max
        save_config()
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_max}‚ÇΩ!")
        show_tg_settings(message)
    except ValueError:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        show_tg_settings(message)
    except Exception as e:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞–∫—Å. —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã!")
        show_tg_settings(message)


def handle_new_order(c: Cardinal, e: NewOrderEvent, *args):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    order_id = e.order.id
    logger.info(f"{LOGGER_PREFIX} –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")

    order_queue.put({
        'cardinal': c,
        'event': e
    })


def send_message_to_buyer(c: Cardinal, username: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"""
    try:
        chat_id = c.account.get_chat_by_name(username, make_request=True)
        if chat_id:
            c.account.send_message(chat_id.id, message)
            logger.info(f"{LOGGER_PREFIX} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {username}")
            return True
        else:
            logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º {username}")
            return False
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {username}: {e}")
        return False


def find_available_accounts(country_code, min_price, max_price):
    """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã"""
    available_accounts = []

    try:
        timer = threading.Timer(3.0, lambda: None)
        timer.start()
        timer.join()

        url = f"https://prod-api.lzt.market/telegram?order_by=price_to_up&pmin={min_price}&pmax={max_price}"

        for origin in config["origins"]:
            url += f"&origin[]={origin}"

        url += f"&spam=no&allow_geo_spamblock=true&password=no&country[]={country_code}"

        headers = {
            "accept": "application/json",
            "authorization": f"Bearer {config['lolz_token']}"
        }

        response = requests.get(url, headers=headers)
        logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—Å –∫ API LOLZ Market: {url}")

        if response.status_code == 200:
            response_data = response.json()

            if 'items' in response_data and response_data['items']:
                items = response_data['items']
                logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ {len(items)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                available_accounts = items
            else:
                logger.info(f"{LOGGER_PREFIX} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        else:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API LOLZ Market: {response.status_code}, {response.text}")

    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

    logger.info(f"{LOGGER_PREFIX} –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(available_accounts)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    return available_accounts


def try_purchase_accounts(accounts):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π"""
    insufficient_funds = False

    for account in accounts:
        item_id = account.get('item_id')
        price = account.get('price')
        logger.info(f"{LOGGER_PREFIX} –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ID: {item_id}, —Ü–µ–Ω–∞: {price}‚ÇΩ")

        purchase_result = purchase_account(item_id)

        if purchase_result and 'item' in purchase_result:
            login_data = purchase_result['item'].get('loginData', {})
            login = login_data.get('login', '')
            password = login_data.get('password', '')
            telegram_id = purchase_result['item'].get('telegram_id', '')
            telegram_phone = purchase_result['item'].get('telegram_phone', '')
            telegram_username = purchase_result['item'].get('telegram_username', '')

            account_data = {
                'login': login,
                'password': password,
                'telegram_id': telegram_id,
                'telegram_phone': telegram_phone,
                'telegram_username': telegram_username
            }

            return purchase_result, account_data, insufficient_funds

        elif purchase_result and 'errors' in purchase_result:
            error_msg = ', '.join(purchase_result.get('errors', []))
            logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ID {item_id}: {error_msg}")

            for fund_error in ["–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"]:
                if fund_error.lower() in error_msg.lower():
                    insufficient_funds = True
                    admin_alert = f"üí∞ –í–ù–ò–ú–ê–ù–ò–ï! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ LOLZ Market –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ID {item_id} –ø–æ —Ü–µ–Ω–µ {price}‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!"
                    notify_admins(admin_alert)
                    logger.error(
                        f"{LOGGER_PREFIX} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ LOLZ Market. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏.")
                    return None, None, insufficient_funds

            ignorable_errors = [
                "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–Ω",
                "–ü—Ä–æ–∏–∑–æ—à–ª–æ –±–æ–ª–µ–µ 20 –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
                "–ø—Ä–æ–∏–∑–æ—à–ª–æ –±–æ–ª–µ–µ 20 –æ—à–∏–±–æ–∫",
                "–Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É",
                "—É–∂–µ –ø—Ä–æ–¥–∞–Ω",
                "–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "retry_request"
            ]

            should_continue = False
            for ignorable_error in ignorable_errors:
                if ignorable_error.lower() in error_msg.lower():
                    should_continue = True
                    break

            if not should_continue:
                logger.error(f"{LOGGER_PREFIX} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_msg}")
                break
            else:
                logger.info(f"{LOGGER_PREFIX} –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç")

    return None, None, insufficient_funds


def purchase_account(item_id):
    """–ü–æ–∫—É–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID"""
    try:
        timer = threading.Timer(3.0, lambda: None)
        timer.start()
        timer.join()

        url = f"https://prod-api.lzt.market/{item_id}/fast-buy"

        headers = {
            "accept": "application/json",
            "authorization": f"Bearer {config['lolz_token']}"
        }

        response = requests.post(url, headers=headers)
        logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ ID {item_id}: {url}")

        if response.status_code == 200:
            result = response.json()
            logger.info(f"{LOGGER_PREFIX} –û—Ç–≤–µ—Ç API (—É—Å–ø–µ—Ö): {str(result)[:200]}...")
            return result
        else:
            result = response.json()
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {response.status_code}, {str(result)}")
            return result

    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {item_id}: {e}")
        return {"errors": [str(e)]}


def notify_admins(message, order_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    if not config["administrators"]:
        logger.warning(f"{LOGGER_PREFIX} –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return

    if order_id and order_id in config["orders_profit"]:
        profit_data = config["orders_profit"][order_id]
        profit_info = (
            f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"‚Ä¢ –°—É–º–º–∞ –Ω–∞ FP: {profit_data.get('fp_sum', 0)} —Ä—É–±.\n"
            f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ LOLZ: {profit_data.get('lolz_cost', 0)} —Ä—É–±.\n"
            f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_data.get('profit', 0):.2f} —Ä—É–±."
        )
        message += profit_info

    for admin_id in config["administrators"]:
        try:
            if order_id:
                kb = InlineKeyboardMarkup()
                kb.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=f"https://funpay.com/orders/{order_id}/"))
                bot.send_message(admin_id, message, reply_markup=kb)
            else:
                bot.send_message(admin_id, message)
            logger.info(f"{LOGGER_PREFIX} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


def get_telegram_codes(item_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã –≤—Ö–æ–¥–∞ –≤ Telegram –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞"""
    max_retries = 10
    retry_delay = 3

    for attempt in range(max_retries):
        try:
            if attempt > 0:
                time.sleep(retry_delay * attempt)
                logger.info(
                    f"{LOGGER_PREFIX} –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {item_id}")

            url = f"https://prod-api.lzt.market/{item_id}/telegram-login-code"

            headers = {
                "accept": "application/json",
                "authorization": f"Bearer {config['lolz_token']}"
            }

            response = requests.get(url, headers=headers)
            logger.info(
                f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—Å –∫–æ–¥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {item_id}: {url}, —Å—Ç–∞—Ç—É—Å: {response.status_code}")

            if response.status_code == 200:
                result = response.json()
                logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–¥—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {item_id}")
                return result
            else:
                try:
                    result = response.json()

                    if 'errors' in result and 'retry_request' in result['errors']:
                        logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ retry_request, –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å")
                        continue

                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤: {response.status_code}, {str(result)}")
                except ValueError:
                    logger.error(
                        f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤: {response.status_code}, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")

                if attempt == max_retries - 1:
                    return None

        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {item_id}: {e}")
            if attempt == max_retries - 1:
                return None

    return None


def handle_plus_message(c: Cardinal, e: NewMessageEvent):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤"""
    try:
        if not e.message.text or (
                not e.message.text.strip().lower().startswith("cd") and e.message.text.strip() != "+"):
            return

        if e.message.text.strip() == "+":
            return

        if e.message.text.strip().lower() == "cd":
            user_id = str(e.message.chat_name)
            user_orders_data = load_user_orders()
            user_phones = set()
            if user_id in user_orders_data["user_orders"]:
                for order_data in user_orders_data["user_orders"][user_id].values():
                    if "phone" in order_data:
                        user_phones.add(order_data["phone"])

            next_order, orders = c.account.get_sells()
            user_orders = [order for order in orders if order.buyer_username == e.message.chat_name]

            for order in user_orders:
                if order.id in order_phone_numbers:
                    user_phones.add(order_phone_numbers[order.id])

            if user_phones:
                phones_list = "\n".join([f"‚Ä¢ {phone}" for phone in sorted(user_phones)])
                message_text = f"üì± –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:\n\n{phones_list}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: cd –Ω–æ–º–µ—Ä"
                c.account.send_message(e.message.chat_id, message_text, chat_name=e.message.chat_name)
            else:
                c.account.send_message(
                    e.message.chat_id,
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç.",
                    chat_name=e.message.chat_name
                )
            return

        cd_match = re.match(r'^cd\s+(\d+)$', e.message.text.strip(), re.IGNORECASE)
        if not cd_match:
            return

        phone_number = cd_match.group(1)
        logger.info(
            f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e.message.author}, —á–∞—Ç {e.message.chat_id}")

        user_orders_data = load_user_orders()

        user_id = str(e.message.chat_name)
        if phone_number in user_orders_data["phone_users"] and user_orders_data["phone_users"][phone_number] != user_id:
            logger.warning(f"{LOGGER_PREFIX} –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–º—É –Ω–æ–º–µ—Ä—É {phone_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            c.account.send_message(
                e.message.chat_id,
                f"‚ùå –ù–æ–º–µ—Ä {phone_number} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –Ω–æ–º–µ—Ä–æ–≤.",
                chat_name=e.message.chat_name
            )
            return

        found_order_id = None
        item_id = None

        if user_id in user_orders_data["user_orders"]:
            for order_id, order_data in user_orders_data["user_orders"][user_id].items():
                if order_data.get("phone") == phone_number:
                    found_order_id = order_id
                    item_id = order_data.get("item_id")
                    break

        if not found_order_id:
            next_order, orders = c.account.get_sells()
            user_orders = [order for order in orders if order.buyer_username == e.message.chat_name]

            if not user_orders:
                c.account.send_message(
                    e.message.chat_id,
                    f"‚ùå –ù–æ–º–µ—Ä {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.",
                    chat_name=e.message.chat_name
                )
                return
            for order in user_orders:
                if order.id in order_phone_numbers and order_phone_numbers[order.id] == phone_number:
                    found_order_id = order.id
                    if order.id in order_account_ids:
                        item_id = order_account_ids[order.id]
                    break

        if not item_id:
            c.account.send_message(
                e.message.chat_id,
                f"‚ùå –î–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                chat_name=e.message.chat_name
            )
            notify_admins(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}, –Ω–æ item_id –Ω–µ –Ω–∞–π–¥–µ–Ω", found_order_id)
            return

        if not config["lolz_token"]:
            c.account.send_message(
                e.message.chat_id,
                "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω LOLZ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                chat_name=e.message.chat_name
            )
            notify_admins(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}, –Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω LOLZ", found_order_id)
            return

        c.account.send_message(
            e.message.chat_id,
            "üîÑ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            chat_name=e.message.chat_name
        )

        codes_data = get_telegram_codes(item_id)

        if not codes_data or 'codes' not in codes_data or not codes_data['codes']:
            c.account.send_message(
                e.message.chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}. –ö–æ–¥ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_name=e.message.chat_name
            )
            notify_admins(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}, item_id: {item_id}", found_order_id)
            return

        latest_code = codes_data['codes'][0]['code']

        code_template = config.get("code_template", DEFAULT_CODE_TEMPLATE)

        order_link = f"https://funpay.com/orders/{found_order_id}/"
        message_text = code_template.format(
            code=latest_code,
            order_link=order_link,
            order_id=found_order_id
        )

        c.account.send_message(
            e.message.chat_id,
            message_text,
            chat_name=e.message.chat_name
        )

        if user_id not in user_orders_data["user_orders"]:
            user_orders_data["user_orders"][user_id] = {}

        if found_order_id not in user_orders_data["user_orders"][user_id]:
            user_orders_data["user_orders"][user_id][found_order_id] = {
                "phone": phone_number,
                "item_id": item_id
            }

        user_orders_data["phone_users"][phone_number] = user_id
        save_user_orders(user_orders_data)

        logger.info(f"{LOGGER_PREFIX} –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as ex:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞: {ex}")
        try:
            c.account.send_message(
                e.message.chat_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                chat_name=e.message.chat_name
            )
        except Exception as send_error:
            logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")

        error_details = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –æ—Ç {e.message.chat_name}\n"
        error_details += f"–ù–æ–º–µ—Ä: {phone_number if 'phone_number' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        error_details += f"Item ID: {item_id if 'item_id' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        error_details += f"–û—à–∏–±–∫–∞: {str(ex)}"

        notify_admins(error_details, found_order_id if 'found_order_id' in locals() else None)


def process_order_queue():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global active_tasks

    logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤")

    while True:
        try:
            with task_lock:
                can_process = active_tasks < max_concurrent_tasks

            if can_process and not order_queue.empty():
                order_data = order_queue.get()
                cardinal = order_data['cardinal']
                event = order_data['event']

                with task_lock:
                    active_tasks += 1

                future = executor.submit(process_order, cardinal, event)
                future.add_done_callback(lambda f: handle_processing_complete(f))

                logger.info(
                    f"{LOGGER_PREFIX} –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{event.order.id} –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks}")

            time.sleep(0.5)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            time.sleep(1)


def handle_processing_complete(future):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤"""
    global active_tasks

    try:
        result = future.result()

        logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
    finally:
        with task_lock:
            active_tasks -= 1
            current_tasks = active_tasks

        logger.info(f"{LOGGER_PREFIX} –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞. –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {current_tasks}")


def process_order(c: Cardinal, e: NewOrderEvent):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞, –∑–∞–ø—É—Å–∫–∞–µ–º–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    order_id = e.order.id
    logger.info(f"{LOGGER_PREFIX} –ù–∞—á–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id}")

    logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: {order_id}")

    try:
        full_order = c.account.get_order(order_id)

        description = e.order.description or ""
        full_desc = full_order.full_description or ""

        logger.info(f"{LOGGER_PREFIX} –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{full_order.id}: {description}")
        logger.info(f"{LOGGER_PREFIX} –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{full_order.id}: {full_desc}")

        has_tg_prefix = False
        tg_match = None

        if 'tg:' in full_desc.lower():
            tg_match = re.search(r'tg:\s*(\w+)', full_desc, re.IGNORECASE)
            if tg_match:
                has_tg_prefix = True

        if not has_tg_prefix and 'tg:' in description.lower():
            tg_match = re.search(r'tg:\s*(\w+)', description, re.IGNORECASE)
            if tg_match:
                has_tg_prefix = True

        if not has_tg_prefix or not tg_match:
            logger.info(f"{LOGGER_PREFIX} –í –∑–∞–∫–∞–∑–µ #{full_order.id} –Ω–µ—Ç –º–µ—Ç–∫–∏ 'tg:' —Å ID. –ü—Ä–æ–ø—É—Å–∫.")
            return f"–ù–µ—Ç –º–µ—Ç–∫–∏ 'tg:' –≤ –∑–∞–∫–∞–∑–µ #{order_id}"

        tg_id = tg_match.group(1).upper()
        logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω ID —Ç–µ–ª–µ–≥—Ä–∞–º: {tg_id}")

        try:
            if hasattr(e.order, 'parse_amount') and callable(e.order.parse_amount):
                amount = e.order.parse_amount()
            elif hasattr(e.order, 'amount') and e.order.amount is not None:
                amount = e.order.amount
            else:
                amount = 1
                if hasattr(full_order, 'amount') and full_order.amount is not None:
                    amount = full_order.amount

            logger.info(f"{LOGGER_PREFIX} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ #{full_order.id}: {amount}")

            if amount > 1:
                logger.warning(
                    f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{full_order.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 1 —Ç–æ–≤–∞—Ä–∞ ({amount}). –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç.")

                try:
                    c.account.refund(full_order.id)
                    message_text = (
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∑–∞–∫–∞–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —à—Ç—É–∫–∏.\n\n"
                        "–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, "
                        "—É–∫–∞–∑–∞–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ 1 —à—Ç."
                    )
                    send_message_to_buyer(c, e.order.buyer_username, message_text)

                    admin_message = f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id} –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ({amount})"
                    notify_admins(admin_message, full_order.id)
                    logger.info(
                        f"{LOGGER_PREFIX} –í—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id} –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
                    return f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ({amount})"
                except Exception as refund_error:
                    logger.error(
                        f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}")
                    notify_admins(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {amount}): {refund_error}",
                        full_order.id)
        except Exception as amount_error:
            logger.error(
                f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ #{full_order.id}: {amount_error}")

        country_info = ""
        country_code = ""
        min_price = 0
        max_price = 0
        for code, country_data in config["countries"].items():
            if tg_id.startswith(code):
                country_code = code
                min_price = country_data['min_price']
                max_price = country_data['max_price']
                break

        purchase_template = config.get("purchase_template", DEFAULT_PURCHASE_TEMPLATE)

        message_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        purchase_result = None
        account_data = None

        if country_code and config["lolz_token"]:
            try:
                purchase_failed = False
                purchase_success = False
                insufficient_funds = False

                logger.info(f"{LOGGER_PREFIX} –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}")
                available_accounts = find_available_accounts(country_code, min_price, max_price)

                if available_accounts:
                    logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ {len(available_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    purchase_result, account_data, funds_issue = try_purchase_accounts(available_accounts)

                    if funds_issue:
                        insufficient_funds = True
                        purchase_failed = True
                        logger.error(
                            f"{LOGGER_PREFIX} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ LOLZ Market –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

                    if purchase_result and 'item' in purchase_result:
                        item_id = purchase_result['item'].get('item_id')
                        logger.info(f"{LOGGER_PREFIX} –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ID: {item_id}")

                        order_account_ids[full_order.id] = item_id

                        if account_data and 'telegram_phone' in account_data:
                            phone = account_data['telegram_phone']
                            message_text = purchase_template.format(phone=phone)
                            order_phone_numbers[full_order.id] = phone
                            user_id = str(e.order.buyer_username)
                            user_orders_data = load_user_orders()

                            if user_id not in user_orders_data["user_orders"]:
                                user_orders_data["user_orders"][user_id] = {}

                            user_orders_data["user_orders"][user_id][str(full_order.id)] = {
                                "phone": phone,
                                "item_id": item_id
                            }

                            user_orders_data["phone_users"][phone] = user_id
                            save_user_orders(user_orders_data)

                            lolz_cost = purchase_result['item'].get('price', 0)
                            fp_sum = full_order.sum if hasattr(full_order, 'sum') else e.order.price
                            save_order_profit(full_order.id, fp_sum, lolz_cost)

                            profit_data = get_order_profit(full_order.id)
                        else:
                            message_text = purchase_template.format(phone="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")

                        if account_data:
                            admin_notification = (
                                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∏ –≤—ã–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}:\n"
                                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {e.order.buyer_username}\n"
                                f"–¢–µ–ª–µ—Ñ–æ–Ω: {account_data['telegram_phone']}\n"
                            )
                            notify_admins(admin_notification, full_order.id)

                        purchase_success = True
                    else:
                        logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç")
                        purchase_failed = True
                else:
                    logger.warning(f"{LOGGER_PREFIX} –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}")
                    purchase_failed = True

                if not purchase_success:
                    if insufficient_funds:
                        logger.error(
                            f"{LOGGER_PREFIX} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ LOLZ Market –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                        try:
                            c.account.refund(full_order.id)
                            message_text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}. –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
                            notify_admins(
                                f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id} –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ LOLZ Market",
                                full_order.id)
                            logger.info(
                                f"{LOGGER_PREFIX} –í—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id} –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤")
                        except Exception as refund_error:
                            message_text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç —Å ID: {tg_id}.{country_info}\n\n–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                            admin_message = f"‚ö†Ô∏è –°–†–û–ß–ù–û! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ LOLZ Market –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ #{full_order.id}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {refund_error}"
                            notify_admins(admin_message, full_order.id)
                            logger.error(
                                f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id} –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤: {refund_error}")
                    elif purchase_failed:
                        logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç")
                        message_text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç —Å ID: {tg_id}.{country_info}\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

                        admin_message = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(available_accounts) if available_accounts else 0}) –æ–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–æ–¥–∞–Ω—ã."
                        notify_admins(admin_message, full_order.id)

                        if config["auto_returns"]:
                            try:
                                c.account.refund(full_order.id)
                                message_text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}. –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
                                notify_admins(f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}",
                                              full_order.id)
                                logger.info(
                                    f"{LOGGER_PREFIX} –í—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}")
                            except Exception as refund_error:
                                logger.error(
                                    f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}")
                                notify_admins(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}",
                                    full_order.id)
                    else:
                        logger.warning(f"{LOGGER_PREFIX} –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}")
                        message_text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç —Å ID: {tg_id}.{country_info}\n\n–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã. –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

                        admin_message = f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}, —Å—Ç—Ä–∞–Ω–∞: {country_code}"
                        notify_admins(admin_message, full_order.id)

                        if config["auto_returns"]:
                            try:
                                c.account.refund(full_order.id)
                                message_text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}. –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
                                notify_admins(f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}",
                                              full_order.id)
                                logger.info(
                                    f"{LOGGER_PREFIX} –í—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}")
                            except Exception as refund_error:
                                logger.error(
                                    f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}")
                                notify_admins(
                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}",
                                    full_order.id)
            except Exception as ex:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API LOLZ Market: {ex}")
                message_text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç —Å ID: {tg_id}.{country_info}"

                admin_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #{full_order.id}: {ex}"
                notify_admins(admin_message, full_order.id)

                if config["auto_returns"]:
                    try:
                        c.account.refund(full_order.id)
                        message_text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
                        notify_admins(f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}", full_order.id)
                        logger.info(f"{LOGGER_PREFIX} –í—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}")
                    except Exception as refund_error:
                        logger.error(
                            f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}")
                        notify_admins(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{full_order.id}: {refund_error}",
                            full_order.id)

        send_message_to_buyer(c, e.order.buyer_username, message_text)
        return f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

    except Exception as ex:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ —Å ID —Ç–µ–ª–µ–≥—Ä–∞–º: {ex}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {ex}"


def shutdown():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞"""
    global executor
    if executor:
        logger.info(f"{LOGGER_PREFIX} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤...")
        executor.shutdown(wait=True)
        logger.info(f"{LOGGER_PREFIX} –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


BIND_TO_PRE_INIT = [init_commands]
BIND_TO_NEW_MESSAGE = [handle_plus_message]
BIND_TO_NEW_ORDER = [handle_new_order]
BIND_TO_EXIT = [shutdown]
BIND_TO_DELETE = [
    {"pattern": "tg_set_origin_self_registration", "handler": set_origin,
     "description": "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è '–°–∞–º–æ—Ä–µ–≥'"},
    {"pattern": "tg_set_origin_self_reg", "handler": set_origin,
     "description": "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è '–°–∞–º–æ—Ä–µ–≥'"}
]


def log_bindings():
    logger.info(f"{LOGGER_PREFIX} –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É–¥–∞–ª–µ–Ω–∏—é:")
    for binding in BIND_TO_DELETE:
        logger.info(
            f"{LOGGER_PREFIX} - –ü–∞—Ç—Ç–µ—Ä–Ω: {binding['pattern']}, –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {binding.get('handler', '–ù–µ —É–∫–∞–∑–∞–Ω')}, –û–ø–∏—Å–∞–Ω–∏–µ: {binding.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")


if 'init_commands' in locals():
    old_init_commands = init_commands


    def new_init_commands(c_: Cardinal):
        result = old_init_commands(c_)
        log_bindings()
        return result


    init_commands = new_init_commands


def find_cheapest_account(country_code, min_price, max_price):
    """
    –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å find_available_accounts.
    –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    available_accounts = find_available_accounts(country_code, min_price, max_price)
    return available_accounts[0] if available_accounts else None